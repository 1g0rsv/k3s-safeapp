{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.text = $event),\n    placeholder: \"Enter text\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.text]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.addRecord && $options.addRecord(...args))\n  }, \"Add Record\"), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.records, record => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: record.id\n    }, _toDisplayString(record.text), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_cache","$event","$data","text","placeholder","onClick","args","$options","addRecord","_Fragment","_renderList","records","record","key","id"],"sources":["/Users/igor/Desktop/Learning-devops/mysafeapp/frontend/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <input v-model=\"text\" placeholder=\"Enter text\" />\n    <button @click=\"addRecord\">Add Record</button>\n    <ul>\n      <li v-for=\"record in records\" :key=\"record.id\">{{ record.text }}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      text: \"\",\n      records: [],\n    };\n  },\n  methods: {\n    async addRecord() {\n      const response = await fetch(\"http://localhost:8080/records\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ text: this.text }),\n      });\n      const record = await response.json();\n      this.records.push(record);\n      this.text = \"\";\n    },\n  },\n  async mounted() {\n    const response = await fetch(\"http://localhost:8080/records\");\n    this.records = await response.json();\n  },\n};\n</script>\n"],"mappings":";;uBACEA,mBAAA,CAMM,c,gBALJC,mBAAA,CAAiD;IAFrD,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAEoBC,KAAA,CAAAC,IAAI,GAAAF,MAAA;IAAEG,WAAW,EAAC;iDAAlBF,KAAA,CAAAC,IAAI,E,GACpBJ,mBAAA,CAA8C;IAArCM,OAAK,EAAAL,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEC,QAAA,CAAAC,SAAA,IAAAD,QAAA,CAAAC,SAAA,IAAAF,IAAA,CAAS;KAAE,YAAU,GACrCP,mBAAA,CAEK,c,kBADHD,mBAAA,CAAqEW,SAAA,QAL3EC,WAAA,CAK2BR,KAAA,CAAAS,OAAO,EAAjBC,MAAM;yBAAjBd,mBAAA,CAAqE;MAAtCe,GAAG,EAAED,MAAM,CAACE;wBAAOF,MAAM,CAACT,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}